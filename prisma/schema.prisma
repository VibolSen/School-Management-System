// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

///////////////////////////
// Models
///////////////////////////

model Department {
  id          String   @id @map("_id") @default(auto()) @db.ObjectId
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  courses     Course[]
}

model User {
  id            String   @id @map("_id") @default(auto()) @db.ObjectId
  name          String?
  email         String   @unique
  password      String
  roleId        String   @db.ObjectId
  role          RoleEnum @relation(fields: [roleId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  lastLogin     DateTime?
  lastActivity  DateTime?
  lockedAt      DateTime?
  lockReason    String?
  isLocked      Boolean  @default(false)
  isActive      Boolean  @default(true)
  department    String?
  position      String?
  contactNumber String?
  image         String?
  enrollmentDate DateTime?
  studentStatusId String? @db.ObjectId

  // Relations
  courses                Course[]          @relation("CourseInstructor")
  attendances            Attendance[]
  taughtExams            Exam[]            @relation("ExamInstructor")
  materialsUploaded      Material[]
  assignments            StudentAssignment[]
  certificates           Certificate[]
  libraryResources       LibraryResource[]
  activityLogs           ActivityLog[]
  createdQRCodeSessions  QRCodeSession[]
  createdOvertimeSessions OvertimeSession[]
  groupMembers           GroupMember[]
}

model Course {
  id           String     @id @map("_id") @default(auto()) @db.ObjectId
  title        String
  description  String?
  instructorId String?    @db.ObjectId
  instructor   User?      @relation("CourseInstructor", fields: [instructorId], references: [id])
  departmentId String?    @db.ObjectId
  department   Department? @relation(fields: [departmentId], references: [id])
  objectives   String?
  methodology  String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  // Relations
  attendances   Attendance[]
  materials     Material[]
  activities    Activity[]
  exams         Exam[]
  certificates  Certificate[]
  groups        Group[]
  qrCodeSessions QRCodeSession[] // <- add this
}


model Attendance {
  id             String               @id @map("_id") @default(auto()) @db.ObjectId
  userId         String               @db.ObjectId
  courseId       String?              @db.ObjectId
  overtimeSessionId String?           @db.ObjectId
  qrCodeSessionId String?             @db.ObjectId
  date           DateTime
  checkIn        DateTime
  checkOut       DateTime?
  statusId       String               @db.ObjectId
  qrCode         String?
  user           User                 @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  course         Course?              @relation(fields: [courseId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  status         AttendanceStatusEnum @relation(fields: [statusId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  overtimeSession OvertimeSession?    @relation(fields: [overtimeSessionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  qrCodeSession  QRCodeSession?       @relation(fields: [qrCodeSessionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Material {
  id           String           @id @map("_id") @default(auto()) @db.ObjectId
  title        String
  description  String?
  typeId       String           @db.ObjectId
  fileUrl      String?
  content      String?
  courseId     String           @db.ObjectId
  uploadedById String           @db.ObjectId
  uploadedAt   DateTime         @default(now())
  course       Course           @relation(fields: [courseId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  uploadedBy   User             @relation(fields: [uploadedById], references: [id], onDelete: NoAction, onUpdate: NoAction)
  type         MaterialTypeEnum @relation(fields: [typeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Activity {
  id          String           @id @map("_id") @default(auto()) @db.ObjectId
  title       String
  description String?
  typeId      String           @db.ObjectId
  courseId    String           @db.ObjectId
  dueDate     DateTime?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  course      Course           @relation(fields: [courseId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  assignments StudentAssignment[]
  groupAssignments GroupAssignment[]
  type        ActivityTypeEnum @relation(fields: [typeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Exam {
  id           String           @id @map("_id") @default(auto()) @db.ObjectId
  title        String
  description  String?
  instructorId String           @db.ObjectId
  courseId     String?          @db.ObjectId
  startDate    DateTime?
  endDate      DateTime?
  duration     Int?
  passingScore Float            @default(70)
  maxAttempts  Int              @default(1)
  isRandom     Boolean          @default(false)
  isShuffled   Boolean          @default(false)
  typeId       String           @default("ANYTIME") @db.ObjectId
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  instructor   User             @relation("ExamInstructor", fields: [instructorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  course       Course?          @relation(fields: [courseId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  certificates Certificate[]
}

model GroupAssignment {
  id                String           @id @map("_id") @default(auto()) @db.ObjectId
  activityId        String           @db.ObjectId
  groupId           String           @db.ObjectId
  assignedAt        DateTime         @default(now())
  dueDate           DateTime?
  content           String?
  fileUrl           String?
  grade             Float?
  feedback          String?
  statusId          String           @default("ASSIGNED") @db.ObjectId

  activity          Activity         @relation(fields: [activityId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  group             Group            @relation(fields: [groupId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  studentAssignments StudentAssignment[]

  @@unique([activityId, groupId])
}

model StudentAssignment {
  id                String           @id @map("_id") @default(auto()) @db.ObjectId
  activityId        String?          @db.ObjectId
  studentId         String?          @db.ObjectId
  groupAssignmentId String?          @db.ObjectId
  submittedAt       DateTime?
  content           String?
  fileUrl           String?
  grade             Float?
  feedback          String?
  statusId          String           @default("ASSIGNED") @db.ObjectId

  activity          Activity?        @relation(fields: [activityId], references: [id])
  student           User?            @relation(fields: [studentId], references: [id])
  groupAssignment   GroupAssignment? @relation(fields: [groupAssignmentId], references: [id])

  @@unique([activityId, studentId])
  @@unique([activityId, groupAssignmentId])
}

model Certificate {
  id         String              @id @map("_id") @default(auto()) @db.ObjectId
  studentId  String              @db.ObjectId
  examId     String?             @db.ObjectId
  courseId   String?             @db.ObjectId
  templateId String              @db.ObjectId
  issuedAt   DateTime            @default(now())
  downloadUrl String
  student    User                @relation(fields: [studentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  exam       Exam?               @relation(fields: [examId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  course     Course?             @relation(fields: [courseId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  template   CertificateTemplate @relation(fields: [templateId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model CertificateTemplate {
  id          String       @id @map("_id") @default(auto()) @db.ObjectId
  name        String
  description String?
  design      String
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  certificates Certificate[]
}

model Competency {
  id          String   @id @map("_id") @default(auto()) @db.ObjectId
  name        String
  description String?
  categoryId  String   @db.ObjectId
  level       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  category    CompetencyCategory @relation(fields: [categoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model CompetencyCategory {
  id          String   @id @map("_id") @default(auto()) @db.ObjectId
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  competencies Competency[]
}

model ActivityLog {
  id        String   @id @map("_id") @default(auto()) @db.ObjectId
  userId    String   @db.ObjectId
  eventType String
  details   String?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model LibraryResource {
  id              String           @id @map("_id") @default(auto()) @db.ObjectId
  title           String
  author          String?
  description     String?
  department      String           @default("General")
  publicationYear Int              @default(2000)
  typeId          String           @db.ObjectId
  fileUrl         String?
  uploadedById    String           @db.ObjectId
  createdAt       DateTime         @default(now())
  uploadedBy      User             @relation(fields: [uploadedById], references: [id])
  type            MaterialTypeEnum @relation(fields: [typeId], references: [id])
}

model QRCodeSession {
  id          String   @id @map("_id") @default(auto()) @db.ObjectId
  courseId    String?  @db.ObjectId
  createdById String   @db.ObjectId
  qrCode      String   @unique
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  attendances Attendance[]
  course      Course?  @relation(fields: [courseId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdBy   User     @relation(fields: [createdById], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model OvertimeSession {
  id          String   @id @map("_id") @default(auto()) @db.ObjectId
  title       String
  description String?
  instructorId String  @db.ObjectId
  startTime   DateTime
  endTime     DateTime
  createdAt   DateTime @default(now())
  attendances Attendance[]
  instructor  User     @relation(fields: [instructorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Group {
  id          String   @id @map("_id") @default(auto()) @db.ObjectId
  name        String
  description String?
  courseId    String?  @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  course      Course?  @relation(fields: [courseId], references: [id])
  members     GroupMember[]
  assignments GroupAssignment[]
}

model GroupMember {
  id         String   @id @map("_id") @default(auto()) @db.ObjectId
  groupId    String   @db.ObjectId
  studentId  String   @db.ObjectId
  assignedAt DateTime @default(now())
  group      Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  student    User     @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([groupId, studentId])
}

// Enum Models
model RoleEnum {
  id    String @id @map("_id") @default(auto()) @db.ObjectId
  name  String @unique
  users User[]
}

model AttendanceStatusEnum {
  id          String       @id @map("_id") @default(auto()) @db.ObjectId
  name        String       @unique
  attendances Attendance[]
}

model MaterialTypeEnum {
  id               String           @id @map("_id") @default(auto()) @db.ObjectId
  name             String           @unique
  materials        Material[]
  libraryResources LibraryResource[]
}

model ActivityTypeEnum {
  id         String     @id @map("_id") @default(auto()) @db.ObjectId
  name       String     @unique
  activities Activity[]
}
